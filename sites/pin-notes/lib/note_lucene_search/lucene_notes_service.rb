#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'lucene_service_types'

module LuceneNotesService
  class Client
    include ::Thrift::Client

    def index(index_path)
      send_index(index_path)
      return recv_index()
    end

    def send_index(index_path)
      send_message('index', Index_args, :index_path => index_path)
    end

    def recv_index()
      result = receive_message(Index_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'index failed: unknown result')
    end

    def index_with_commit_id(index_path, commit_id)
      send_index_with_commit_id(index_path, commit_id)
      return recv_index_with_commit_id()
    end

    def send_index_with_commit_id(index_path, commit_id)
      send_message('index_with_commit_id', Index_with_commit_id_args, :index_path => index_path, :commit_id => commit_id)
    end

    def recv_index_with_commit_id()
      result = receive_message(Index_with_commit_id_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'index_with_commit_id failed: unknown result')
    end

    def search_with_commit_id(query, commit_id)
      send_search_with_commit_id(query, commit_id)
      return recv_search_with_commit_id()
    end

    def send_search_with_commit_id(query, commit_id)
      send_message('search_with_commit_id', Search_with_commit_id_args, :query => query, :commit_id => commit_id)
    end

    def recv_search_with_commit_id()
      result = receive_message(Search_with_commit_id_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_with_commit_id failed: unknown result')
    end

    def search_full(query)
      send_search_full(query)
      return recv_search_full()
    end

    def send_search_full(query)
      send_message('search_full', Search_full_args, :query => query)
    end

    def recv_search_full()
      result = receive_message(Search_full_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_full failed: unknown result')
    end

    def search_newest(query)
      send_search_newest(query)
      return recv_search_newest()
    end

    def send_search_newest(query)
      send_message('search_newest', Search_newest_args, :query => query)
    end

    def recv_search_newest()
      result = receive_message(Search_newest_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_newest failed: unknown result')
    end

    def search_page_full(query, start, count)
      send_search_page_full(query, start, count)
      return recv_search_page_full()
    end

    def send_search_page_full(query, start, count)
      send_message('search_page_full', Search_page_full_args, :query => query, :start => start, :count => count)
    end

    def recv_search_page_full()
      result = receive_message(Search_page_full_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_page_full failed: unknown result')
    end

    def search_page_newest(query, start, count)
      send_search_page_newest(query, start, count)
      return recv_search_page_newest()
    end

    def send_search_page_newest(query, start, count)
      send_message('search_page_newest', Search_page_newest_args, :query => query, :start => start, :count => count)
    end

    def recv_search_page_newest()
      result = receive_message(Search_page_newest_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_page_newest failed: unknown result')
    end

    def delete_index(delete_path)
      send_delete_index(delete_path)
      return recv_delete_index()
    end

    def send_delete_index(delete_path)
      send_message('delete_index', Delete_index_args, :delete_path => delete_path)
    end

    def recv_delete_index()
      result = receive_message(Delete_index_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'delete_index failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_index(seqid, iprot, oprot)
      args = read_args(iprot, Index_args)
      result = Index_result.new()
      result.success = @handler.index(args.index_path)
      write_result(result, oprot, 'index', seqid)
    end

    def process_index_with_commit_id(seqid, iprot, oprot)
      args = read_args(iprot, Index_with_commit_id_args)
      result = Index_with_commit_id_result.new()
      result.success = @handler.index_with_commit_id(args.index_path, args.commit_id)
      write_result(result, oprot, 'index_with_commit_id', seqid)
    end

    def process_search_with_commit_id(seqid, iprot, oprot)
      args = read_args(iprot, Search_with_commit_id_args)
      result = Search_with_commit_id_result.new()
      result.success = @handler.search_with_commit_id(args.query, args.commit_id)
      write_result(result, oprot, 'search_with_commit_id', seqid)
    end

    def process_search_full(seqid, iprot, oprot)
      args = read_args(iprot, Search_full_args)
      result = Search_full_result.new()
      result.success = @handler.search_full(args.query)
      write_result(result, oprot, 'search_full', seqid)
    end

    def process_search_newest(seqid, iprot, oprot)
      args = read_args(iprot, Search_newest_args)
      result = Search_newest_result.new()
      result.success = @handler.search_newest(args.query)
      write_result(result, oprot, 'search_newest', seqid)
    end

    def process_search_page_full(seqid, iprot, oprot)
      args = read_args(iprot, Search_page_full_args)
      result = Search_page_full_result.new()
      result.success = @handler.search_page_full(args.query, args.start, args.count)
      write_result(result, oprot, 'search_page_full', seqid)
    end

    def process_search_page_newest(seqid, iprot, oprot)
      args = read_args(iprot, Search_page_newest_args)
      result = Search_page_newest_result.new()
      result.success = @handler.search_page_newest(args.query, args.start, args.count)
      write_result(result, oprot, 'search_page_newest', seqid)
    end

    def process_delete_index(seqid, iprot, oprot)
      args = read_args(iprot, Delete_index_args)
      result = Delete_index_result.new()
      result.success = @handler.delete_index(args.delete_path)
      write_result(result, oprot, 'delete_index', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX_PATH = 1

    FIELDS = {
      INDEX_PATH => {:type => ::Thrift::Types::STRING, :name => 'index_path'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Index_with_commit_id_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    INDEX_PATH = 1
    COMMIT_ID = 2

    FIELDS = {
      INDEX_PATH => {:type => ::Thrift::Types::STRING, :name => 'index_path'},
      COMMIT_ID => {:type => ::Thrift::Types::STRING, :name => 'commit_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Index_with_commit_id_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_with_commit_id_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1
    COMMIT_ID = 2

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      COMMIT_ID => {:type => ::Thrift::Types::STRING, :name => 'commit_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_with_commit_id_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_full_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_full_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_newest_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_newest_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_full_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1
    START = 2
    COUNT = 3

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_full_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_newest_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1
    START = 2
    COUNT = 3

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_newest_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DELETE_PATH = 1

    FIELDS = {
      DELETE_PATH => {:type => ::Thrift::Types::STRING, :name => 'delete_path'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

