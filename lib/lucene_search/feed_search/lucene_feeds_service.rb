#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module LuceneFeedsService
  class Client
    include ::Thrift::Client

    def index()
      send_index()
      return recv_index()
    end

    def send_index()
      send_message('index', Index_args)
    end

    def recv_index()
      result = receive_message(Index_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'index failed: unknown result')
    end

    def index_one_feed(feed_id)
      send_index_one_feed(feed_id)
      return recv_index_one_feed()
    end

    def send_index_one_feed(feed_id)
      send_message('index_one_feed', Index_one_feed_args, :feed_id => feed_id)
    end

    def recv_index_one_feed()
      result = receive_message(Index_one_feed_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'index_one_feed failed: unknown result')
    end

    def delete_index(feed_id)
      send_delete_index(feed_id)
      return recv_delete_index()
    end

    def send_delete_index(feed_id)
      send_message('delete_index', Delete_index_args, :feed_id => feed_id)
    end

    def recv_delete_index()
      result = receive_message(Delete_index_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'delete_index failed: unknown result')
    end

    def search(query)
      send_search(query)
      return recv_search()
    end

    def send_search(query)
      send_message('search', Search_args, :query => query)
    end

    def recv_search()
      result = receive_message(Search_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search failed: unknown result')
    end

    def search_page(query, start, count)
      send_search_page(query, start, count)
      return recv_search_page()
    end

    def send_search_page(query, start, count)
      send_message('search_page', Search_page_args, :query => query, :start => start, :count => count)
    end

    def recv_search_page()
      result = receive_message(Search_page_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_page failed: unknown result')
    end

    def search_by_user(query, email)
      send_search_by_user(query, email)
      return recv_search_by_user()
    end

    def send_search_by_user(query, email)
      send_message('search_by_user', Search_by_user_args, :query => query, :email => email)
    end

    def recv_search_by_user()
      result = receive_message(Search_by_user_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_by_user failed: unknown result')
    end

    def search_page_by_user(query, start, count, email)
      send_search_page_by_user(query, start, count, email)
      return recv_search_page_by_user()
    end

    def send_search_page_by_user(query, start, count, email)
      send_message('search_page_by_user', Search_page_by_user_args, :query => query, :start => start, :count => count, :email => email)
    end

    def recv_search_page_by_user()
      result = receive_message(Search_page_by_user_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search_page_by_user failed: unknown result')
    end

    def parse_content(content)
      send_parse_content(content)
      return recv_parse_content()
    end

    def send_parse_content(content)
      send_message('parse_content', Parse_content_args, :content => content)
    end

    def recv_parse_content()
      result = receive_message(Parse_content_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'parse_content failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_index(seqid, iprot, oprot)
      args = read_args(iprot, Index_args)
      result = Index_result.new()
      result.success = @handler.index()
      write_result(result, oprot, 'index', seqid)
    end

    def process_index_one_feed(seqid, iprot, oprot)
      args = read_args(iprot, Index_one_feed_args)
      result = Index_one_feed_result.new()
      result.success = @handler.index_one_feed(args.feed_id)
      write_result(result, oprot, 'index_one_feed', seqid)
    end

    def process_delete_index(seqid, iprot, oprot)
      args = read_args(iprot, Delete_index_args)
      result = Delete_index_result.new()
      result.success = @handler.delete_index(args.feed_id)
      write_result(result, oprot, 'delete_index', seqid)
    end

    def process_search(seqid, iprot, oprot)
      args = read_args(iprot, Search_args)
      result = Search_result.new()
      result.success = @handler.search(args.query)
      write_result(result, oprot, 'search', seqid)
    end

    def process_search_page(seqid, iprot, oprot)
      args = read_args(iprot, Search_page_args)
      result = Search_page_result.new()
      result.success = @handler.search_page(args.query, args.start, args.count)
      write_result(result, oprot, 'search_page', seqid)
    end

    def process_search_by_user(seqid, iprot, oprot)
      args = read_args(iprot, Search_by_user_args)
      result = Search_by_user_result.new()
      result.success = @handler.search_by_user(args.query, args.email)
      write_result(result, oprot, 'search_by_user', seqid)
    end

    def process_search_page_by_user(seqid, iprot, oprot)
      args = read_args(iprot, Search_page_by_user_args)
      result = Search_page_by_user_result.new()
      result.success = @handler.search_page_by_user(args.query, args.start, args.count, args.email)
      write_result(result, oprot, 'search_page_by_user', seqid)
    end

    def process_parse_content(seqid, iprot, oprot)
      args = read_args(iprot, Parse_content_args)
      result = Parse_content_result.new()
      result.success = @handler.parse_content(args.content)
      write_result(result, oprot, 'parse_content', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Index_one_feed_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FEED_ID = 1

    FIELDS = {
      FEED_ID => {:type => ::Thrift::Types::I32, :name => 'feed_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Index_one_feed_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_index_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FEED_ID = 1

    FIELDS = {
      FEED_ID => {:type => ::Thrift::Types::I32, :name => 'feed_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_index_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1
    START = 2
    COUNT = 3

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_by_user_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1
    EMAIL = 2

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_by_user_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_by_user_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    QUERY = 1
    START = 2
    COUNT = 3
    EMAIL = 4

    FIELDS = {
      QUERY => {:type => ::Thrift::Types::STRING, :name => 'query'},
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'},
      EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Search_page_by_user_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Parse_content_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CONTENT = 1

    FIELDS = {
      CONTENT => {:type => ::Thrift::Types::STRING, :name => 'content'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Parse_content_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

